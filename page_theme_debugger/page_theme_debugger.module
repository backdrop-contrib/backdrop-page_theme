<?php

/**
 * @file
 * This module displays a list of modules which override the system default
 * theme sorted by module's call-up.
 */


/**
 * Implements hook_block_info().
 */
function page_theme_debugger_block_info() {

  $blocks['page_theme_debugger'] = array(
    'info' => t('Page Theme Debugger'),
    'description' => t('Displays a ist of modules which override the system default theme.'),
    'cache' => BACKDROP_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function page_theme_debugger_block_configure($delta = '', $settings = array()) {

  $form = array();

  if ($delta == 'page_theme_debugger') {

    $settings += array(
      'blacklist' => config_get('page_theme_debugger.settings', 'blacklist'),
    );

    $form['blacklist'] = array(
      '#type' => 'textarea',
      '#title' => t('Blacklist'),
      '#description' => t('Enter one module per line of each modules that should not execute <em>hook_custom_theme()</em>. Example entry is <em>views</em> for the Views module.'),
      '#default_value' => $settings['blacklist'],
    );
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function page_theme_debugger_block_save($delta = '', &$edit = array()) {

  if ($delta == 'page_theme_debugger') {

    $config = config('page_theme_debugger.settings');
    $config->set('blacklist', $edit['blacklist']);
    $config->save();

    unset($edit['blacklist']);
  }
}


/**
 * Implements hook_block_view().
 */
function page_theme_debugger_block_view($delta = '', $settings = array(), $contexts = array()) {

  $block = array();

  if ($delta == 'page_theme_debugger') {

    $settings += array(
      'blacklist' => config_get('page_theme_debugger.settings', 'blacklist'),
    );
    $blacklist = preg_split("/\r\n|\n|\r|\s/", $settings['blacklist'], -1, PREG_SPLIT_NO_EMPTY);

    $items = array();
    $items[] = t('Default theme => !theme', array('!theme' => config_get('system.core', 'theme_default')));

    foreach (module_implements('custom_theme') as $module) {

      if (!in_array($module, $blacklist)) {

        $theme = module_invoke($module, 'custom_theme');

        if (is_null($theme)) {
          $items[] = t('Module !module => %theme', array('!module' => $module, '%theme' => 'NULL'));
        }
        else if (empty($theme)) {
          $items[] = t("Module !module => ''", array('!module' => $module));
        }
        else if (is_array($theme)) {
          $items[] = t('Module !module => !theme', array('!module' => $module, '!theme' => serialize($theme)));
        }
        else {
          $items[] = t('Module !module => !theme', array('!module' => $module, '!theme' => $theme));
        }
      }
    }

    $block['subject'] = t('Page Theme Debugger');
    $block['content'] = theme('item_list', array('items' => $items));
  }

  return $block;
}


/**
 * Implements hook_config_info().
 */
function page_theme_debugger_config_info() {

  $prefixes['page_theme_debugger.settings'] = array(
    'label' => t('Page Theme Debugger settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}
