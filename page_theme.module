<?php

/**
 * @file
 * This module allows to use different themes than the site default on specific
 * pages.
 */


/**
 * Implements hook_permission().
 */
function page_theme_permission() {

  $perm = array();
  $perm['administer page theme'] = array(
    'title' => t('Administer page theme settings'),
  );

  return $perm;
}


/**
 * Implements hook_menu().
 */
function page_theme_menu() {

  $menu = array();
  $menu['admin/structure/page-theme'] = array(
    'title' => 'Page theme',
    'description' => 'Configure which theme is used on which pages.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_overview'),
    'access arguments' => array('administer page theme'),
    'file' => 'page_theme.admin.inc',
  );
  $menu['admin/structure/page-theme/add'] = array(
    'title' => 'Add theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_add'),
    'access callback' => 'page_theme_menu_access_add',
    'access arguments' => array('administer page theme'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'page_theme.admin.inc',
  );
  $menu['admin/structure/page-theme/manage/%page_theme'] = array(
    'title' => 'Configure theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_edit', 4),
    'access arguments' => array('administer page theme'),
    'file' => 'page_theme.admin.inc',
  );
  $menu['admin/structure/page-theme/manage/%page_theme/configure'] = array(
    'title' => 'Configure theme',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $menu['admin/structure/page-theme/manage/%page_theme/delete'] = array(
    'title' => 'Delete theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_delete', 4),
    'access arguments' => array('administer page theme'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'page_theme.admin.inc',
  );

  return $menu;
}

function page_theme_menu_access_add($perm) {

  $theme_options = page_theme_get_theme_options();
  return user_access($perm) && count($theme_options) > 1;
}

function page_theme_load($theme) {

  $page_theme = db_query('SELECT theme, pages, status, weight FROM {page_theme} WHERE theme = :theme', array(':theme' => $theme))
    ->fetchObject();
  return $page_theme;
}


/**
 * Implements hook_theme().
 */
function page_theme_theme() {

  $theme = array();
  $theme['page_theme_admin_overview'] = array(
    'render element' => 'form',
    'file' => 'page_theme.admin.inc',
  );

  return $theme;
}


/**
 * Implements hook_custom_theme().
 */
function page_theme_custom_theme() {

  $path = backdrop_get_path_alias($_GET['q']);

  $result = db_query('SELECT theme, pages FROM {page_theme} WHERE status = 1 ORDER BY weight, theme');
  foreach ($result as $page_theme) {

    $page_match = backdrop_match_path($path, $page_theme->pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || backdrop_match_path($_GET['q'], $page_theme->pages);
    }

    if ($page_match) {
      return $page_theme->theme;
    }
  }
}


/**
 *  Helper functions.
 */
function page_theme_get_theme_options() {

  static $options = array();

  if (!$options) {

    $themes = page_theme_get_themes();

    $result = db_query('SELECT theme FROM {page_theme}');
    foreach ($result as $page_theme) {
      unset($themes[$page_theme->theme]);
    }

    $options['0'] = '- '. t('Select theme') .' -';
    foreach ($themes as $theme => $theme_name) {
      $options[$theme] = page_theme_get_theme_status($theme) ? $theme_name : t('!theme (disabled)', array('!theme' => $theme_name));
    }
  }

  return $options;
}

function page_theme_get_themes($theme = NULL) {

  static $themes = array();

  if (!$themes) {

    foreach (system_rebuild_theme_data() as $theme_data) {

      $visibility = empty($theme_data->info['hidden']);
      $compatible_core = isset($theme_data->info['backdrop']) && $theme_data->info['backdrop'] == BACKDROP_CORE_COMPATIBILITY && isset($theme_data->info['regions']['content']);
      $compatible_php = version_compare(phpversion(), $theme_data->info['php'], '>=');

      if ($visibility && $compatible_core && $compatible_php) {
        $themes[$theme_data->name] = $theme_data->info['name'];
      }
    }

    asort($themes);
  }

  return !is_null($theme) ? (isset($themes[$theme]) ? $themes[$theme] : $theme) : $themes;
}

function page_theme_get_theme_name($theme) {

  $themes = page_theme_get_themes();

  return isset($themes[$theme]) ? (page_theme_get_theme_status($theme) ? $themes[$theme] : t('!theme (disabled)', array('!theme' => $themes[$theme]))) : t('!theme (not available)', array('!theme' => $theme));
}

function page_theme_get_theme_status($theme) {

  $system = db_query('SELECT status FROM {system} WHERE name = :name', array(':name' => $theme))
    ->fetchObject();

  return $system->status;
}
