<?php

/**
 * @file
 * Allows to use different themes than the site default on specific pages.
 */


/**
 * Implements hook_permission().
 */
function page_theme_permission() {

  $perms['administer page theme'] = array(
    'title' => t('Administer page theme settings'),
  );

  return $perms;
}


/**
 * Implements hook_menu().
 */
function page_theme_menu() {

  $items['admin/appearance/page-theme'] = array(
    'title' => 'Page theme',
    'description' => 'Configure which theme is used on which pages.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_overview'),
    'access arguments' => array('administer page theme'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/add'] = array(
    'title' => 'Add theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_add'),
    'access callback' => 'page_theme_menu_access_add',
    'access arguments' => array('administer page theme'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/manage/%page_theme'] = array(
    'title' => 'Configure theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_edit', 4),
    'access arguments' => array('administer page theme'),
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/manage/%page_theme/configure'] = array(
    'title' => 'Configure theme',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/appearance/page-theme/manage/%page_theme/delete'] = array(
    'title' => 'Delete theme',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_delete', 4),
    'access arguments' => array('administer page theme'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'page_theme.admin.inc',
  );

  return $items;
}

function page_theme_menu_access_add($perm) {

  $theme_options = page_theme_get_theme_options();

  return user_access($perm) && count($theme_options) > 1;
}

function page_theme_load($theme) {

  $page_themes = page_theme_get_page_themes_all();

  return $page_themes[$theme];
}


/**
 * Implements hook_theme().
 */
function page_theme_theme() {

  $themes['page_theme_admin_overview'] = array(
    'render element' => 'form',
    'file' => 'page_theme.admin.inc',
  );

  return $themes;
}


/**
 * Implements hook_custom_theme().
 */
function page_theme_custom_theme() {

  $path = backdrop_strtolower(backdrop_get_path_alias($_GET['q']));

  $page_themes = page_theme_get_page_themes_enabled();
  foreach ($page_themes as $page_theme) {
    $pages = backdrop_strtolower($page_theme['pages']);

    $page_match = backdrop_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || backdrop_match_path($_GET['q'], $pages);
    }

    if ($page_match) {
      return $page_theme['theme'];
    }
  }
}


/**
 * Implements hook_config_info().
 */
function page_theme_config_info() {

  $prefixes['page_theme.'] = array(
    'name_key' => 'theme',
    'label_callback' => 'page_theme_get_page_themes_name',
    'group' => t('Page Theme'),
  );

  return $prefixes;
}


/**
 * Helper functions.
 */

function page_theme_get_themes($theme = NULL) {

  static $themes = array();

  if (!$themes) {

    $result = db_query('SELECT name, info FROM {system} WHERE type = :type', array(':type' => 'theme'));
    foreach ($result as $theme_data) {
      $theme_data->info = unserialize($theme_data->info);

      if (empty($theme_data->info['hidden']) || !$theme_data->info['hidden']) {
        $themes[$theme_data->name] = $theme_data->info['name'];
      }
    }

    asort($themes);
  }

  return !is_null($theme) ? (isset($themes[$theme]) ? $themes[$theme] : $theme) : $themes;
}

function page_theme_get_theme_options() {

  static $options = array();

  if (!$options) {

    $themes = page_theme_get_themes();

    $page_themes = page_theme_get_page_themes_all();
    foreach ($page_themes as $theme => $page_theme) {
      unset($themes[$theme]);
    }

    $options['0'] = '- '. t('Select theme') .' -';
    foreach ($themes as $theme => $theme_name) {
      $options[$theme] = page_theme_get_theme_status($theme) ? $theme_name : t('!theme (disabled)', array('!theme' => $theme_name));
    }
  }

  return $options;
}

function page_theme_get_theme_name($theme) {

  $themes = page_theme_get_themes();

  return isset($themes[$theme]) ? (page_theme_get_theme_status($theme) ? $themes[$theme] : t('!theme (disabled)', array('!theme' => $themes[$theme]))) : t('!theme (not available)', array('!theme' => $theme));
}

function page_theme_get_theme_status($theme) {

  $system = db_query('SELECT status FROM {system} WHERE name = :name', array(':name' => $theme))
    ->fetchObject();

  return $system->status;
}


function page_theme_get_page_themes_all() {

  $weight = array();
  $theme = array();
  $page_themes = array();

  $config_names = config_get_names_with_prefix('page_theme.');
  foreach ($config_names as $config_name) {

    $page_theme = config_get($config_name);

    $weight[$page_theme['theme']] = $page_theme['weight'];
    $theme[$page_theme['theme']] = $page_theme['theme'];
    $page_themes[$page_theme['theme']] = $page_theme;
  }

  array_multisort($weight, SORT_ASC, $theme, SORT_ASC, SORT_STRING, $page_themes);

  return $page_themes;
}

function page_theme_get_page_themes_enabled() {

  $page_themes_enabled = &backdrop_static(__FUNCTION__);
  if (isset($page_themes_enabled)) {
    return $page_themes_enabled;
  }

  $page_themes_enabled = array();
  $page_themes = page_theme_get_page_themes_all();
  foreach ($page_themes as $theme) {
    if (!!$theme['status']) {
      $page_themes_enabled[$theme['theme']] = $theme;
    }
  }

  return $page_themes_enabled;
}

function page_theme_get_page_themes_name($page_theme) {

  return page_theme_get_theme_name($page_theme['theme']);
}
