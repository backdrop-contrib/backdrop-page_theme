<?php

/**
 * @file
 * Allows to use different themes than the site default on specific pages.
 */


/**
 * Implements hook_menu().
 */
function page_theme_menu() {

  $items['admin/appearance/page-theme'] = array(
    'title' => 'Page theme',
    'description' => 'Configure which theme is used on which pages.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_overview'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/add'] = array(
    'title' => 'Add rule',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_add'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/manage/%page_theme_rule'] = array(
    'title' => 'Configure rule',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_edit', 4),
    'access arguments' => array('administer themes'),
    'file' => 'page_theme.admin.inc',
  );
  $items['admin/appearance/page-theme/manage/%page_theme_rule/configure'] = array(
    'title' => 'Configure rule',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/appearance/page-theme/manage/%page_theme_rule/delete'] = array(
    'title' => 'Delete rule',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('page_theme_admin_delete', 4),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'page_theme.admin.inc',
  );

  return $items;
}

function page_theme_rule_load($rule) {

  $rule = strtr($rule, array('-' => '_'));
  $rules = page_theme_get_rules();

  return isset($rules[$rule]) ? $rules[$rule] : FALSE;
}


/**
 * Implements hook_theme().
 */
function page_theme_theme() {

  $themes['page_theme_admin_overview'] = array(
    'render element' => 'form',
    'file' => 'page_theme.admin.inc',
  );

  return $themes;
}


/**
 * Implements hook_custom_theme().
 */
function page_theme_custom_theme() {

  $path = backdrop_strtolower(backdrop_get_path_alias($_GET['q']));

  $rules = page_theme_get_rules_enabled();
  foreach ($rules as $rule) {
    $pages = backdrop_strtolower($rule['pages']);

    $page_match = backdrop_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || backdrop_match_path($_GET['q'], $pages);
    }

    if ($page_match) {
      return $rule['theme'];
    }
  }
}


/**
 * Implements hook_config_info().
 */
function page_theme_config_info() {

  $prefixes['page_theme.rule'] = array(
    'name_key' => 'rule',
    'label_key' => 'name',
    'group' => t('Page Theme'),
  );

  return $prefixes;
}


/**
 * Helper functions: Themes
 */
function page_theme_get_themes() {

  static $themes = array();

  if (!$themes) {

    $result = db_query('SELECT name, status, info FROM {system} WHERE type = :type', array(':type' => 'theme'));
    foreach ($result as $theme) {
      $theme->info = unserialize($theme->info);

      if (empty($theme->info['hidden']) || !$theme->info['hidden']) {
        $themes[$theme->name] = array(
          'theme' => $theme->name,
          'name' => $theme->info['name'],
          'status' => $theme->status,
        );
      }
    }
  }

  return $themes;
}

function page_theme_get_themes_options() {

  static $options = array();

  if (!$options) {

    $themes = page_theme_get_themes();

    $options['0'] = '- '. t('Select theme') .' -';
    foreach ($themes as $theme) {
      $options[$theme['theme']] = page_theme_get_theme_name($theme['theme']);
    }

    asort($options, SORT_NATURAL | SORT_FLAG_CASE);
  }

  return $options;
}

function page_theme_get_theme_name($theme, $expand = FALSE) {

  $themes = page_theme_get_themes();

  if (isset($themes[$theme])) {
    $name = $expand && !$themes[$theme]['status'] ? check_plain($themes[$theme]['name']) . '<br><small>' . t('(Disabled)') . '</small>' : $themes[$theme]['name'];
  }
  else {
    $name = $expand ? $theme . '<br><small>' . t('(Not available)') . '</small>' : $theme;
  }

  return $name;
}


/**
 * Helper functions: Rules
 */
function page_theme_get_rules() {

  $weight = $rule = $rules = array();

  foreach (config_get_names_with_prefix('page_theme.rule.') as $name) {
    $data = config_get($name);

    $weight[$data['rule']] = $data['weight'];
    $rule[$data['rule']] = $data['rule'];
    $rules[$data['rule']] = $data;
  }

  array_multisort($weight, SORT_ASC, $rule, SORT_ASC, SORT_STRING, $rules);

  return $rules;
}

function page_theme_get_rules_enabled() {

  $rules_enabled = &backdrop_static(__FUNCTION__);
  if (isset($rules_enabled)) {
    return $rules_enabled;
  }

  $rules_enabled = array();
  foreach (page_theme_get_rules() as $rule) {
    if (!!$rule['status']) {
      $rules_enabled[$rule['rule']] = $rule;
    }
  }

  return $rules_enabled;
}
